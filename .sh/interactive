s() {
	[ -e "$HOME/.sh/$1" ] && . "$HOME/.sh/$1"
}

s environment
s aliases

# If this shell is for some reason not interactive, stop at this point.
# This check is possibly total bullshit.
if [ -z "$PS1" ]; then return; fi

s color
s prompt

# If we have it, use gpg-agent. The high-level algorithm is as follows:
#   1. If there is no "gpg-agent" command, do nothing.
#   2. If it exists, load "~/.gpg-agent-info". This file can of course be stale.
#   3. Check whether the socket in $GPG_AGENT_INFO exists. If it doesn't, start
#      a new gpg-agent and load "~/.gpg-agent-info" again.
#   4. Export the variables.
# Note that we don't start gpg-agent if it is running already. The reason for
# that is that apparently, on a Mac with GPGTools, the SSH socket goes away when
# trying so start gpg-agent a second time...
if which gpg-agent >/dev/null 2>&1; then
	if [ -r "$HOME/.gpg-agent-info" ]; then
		. "$HOME/.gpg-agent-info"
		if ! [ -S "$(echo $GPG_AGENT_INFO | cut -d : -f 1)" ]; then
			gpg-agent --daemon >/dev/null 2>&1
			[ -r "$HOME/.gpg-agent-info" ] && . "$HOME/.gpg-agent-info"
		fi
		export GPG_AGENT_INFO SSH_AUTH_SOCK SSH_AGENT_PID
	fi
fi

# On sanity, I'm using Xming and Neo. Set the keyboard layout here, since the
# .xinitrc file will not be loaded.
[ "$HOSTNAME" = 'sanity' ] && xmodmap "$HOME/res/neo_de.xmodmap"

# If this is not the bash, stop at this point.
if [ -z "$BASH" ]; then return; fi

s completion
